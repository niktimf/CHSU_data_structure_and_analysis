use anyhow::Result as AnyHowResult;
use async_trait::async_trait;
use std::collections::HashMap;

use itertools::Itertools;
use reqwest::Client;
use serde::Deserialize;
use thousands::Separable;

#[derive(Debug, Clone)]
struct Exchange {
    client: Client,
}

impl Exchange {
    fn new() -> Self {
        Exchange {
            client: Client::new(),
        }
    }
}

#[derive(Deserialize)]
struct ExchangeRates {
    rates: HashMap<String, f64>,
}

#[async_trait]
trait CurrencyRate {
    async fn get_usd_to_rub_rate(&self) -> AnyHowResult<f64>;
}

#[async_trait]
impl CurrencyRate for Exchange {
    // Получение курса доллара к рублю
    async fn get_usd_to_rub_rate(&self) -> AnyHowResult<f64> {
        let response = self
            .client
            .get("https://api.exchangerate-api.com/v4/latest/USD")
            .send()
            .await?
            .json::<ExchangeRates>()
            .await?;

        // Получаем курс рубля к доллару
        Ok(*response.rates.get("RUB").unwrap_or(&0.0))
    }
}

#[derive(Debug, Clone, Copy)]
struct Dollar {
    amount: f64,
}

#[async_trait]
trait CurrencyConversion {
    async fn to_rubles(&self, exchange: &Exchange) -> AnyHowResult<f64>;
}

#[async_trait]
impl CurrencyConversion for Dollar {
    async fn to_rubles(&self, exchange: &Exchange) -> AnyHowResult<f64> {
        let rate = exchange.get_usd_to_rub_rate().await?;
        Ok(self.amount * rate)
    }
}

fn print_top5_by_column(
    data: &[(&str, i32, f64, i32, Vec<&str>, f64, f64)],
    column_selector: impl Fn(&(&str, i32, f64, i32, Vec<&str>, f64, f64)) -> f64,
) {
    data.into_iter().sorted_by(|a, b| {
        column_selector(b)
            .partial_cmp(&column_selector(a))
            .unwrap_or(std::cmp::Ordering::Equal)
    });

    // Заголовок таблицы
    println!("Название | Год | Рейтинг | Длина | Жанры | Бюджет | Сборы |");
    println!("-----------------------------------------------------------");

    // Выводим топ-5 элементов
    for row in data.iter().take(5) {
        println!(
            "{: <35} | {} | {: >7.2} | {: >5} | {: <20} | {: >6.1} | {: >6.1} |",
            row.0,
            row.1,
            row.2,
            row.3,
            row.4.join(", "),
            row.5,
            row.6
        );
    }
}

#[tokio::main]
async fn main() -> AnyHowResult<()> {
    // название, год, рейтинг, продолжительность(мин), жанры, бюджет(млн), кассовые сборы(млн)
    let oscar_data = vec![
        (
            "Форма воды",
            2017,
            6.914,
            123,
            vec!["фантастика", "драма"],
            19.4,
            195.243464,
        ),
        (
            "Лунный свет",
            2016,
            6.151,
            110,
            vec!["драма"],
            1.5,
            65.046687,
        ),
        (
            "В центре внимания",
            2015,
            7.489,
            129,
            vec!["драма", "криминал", "история"],
            20.0,
            88.346473,
        ),
        (
            "Бёрдмэн",
            2014,
            7.604,
            119,
            vec!["драма", "комедия"],
            18.0,
            103.215094,
        ),
        (
            "12 лет рабства",
            2013,
            7.71,
            133,
            vec!["драма", "биография", "история"],
            20.0,
            178.371993,
        ),
        (
            "Операция 'Арго'",
            2012,
            7.517,
            120,
            vec!["триллер", "драма", "биография"],
            44.5,
            232.324128,
        ),
        (
            "Артист",
            2011,
            7.942,
            96,
            vec!["драма", "мелодрама", "комедия"],
            15.0,
            133.432856,
        ),
        (
            "Король говорит!",
            2010,
            7.977,
            118,
            vec!["драма", "биография", "история"],
            15.0,
            414.211549,
        ),
        (
            "Повелитель бури",
            2008,
            7.298,
            126,
            vec!["триллер", "драма", "военный", "история"],
            15.0,
            49.230772,
        ),
        (
            "Миллионер из трущоб",
            2008,
            7.724,
            120,
            vec!["драма", "мелодрама"],
            15.0,
            377.910544,
        ),
        (
            "Старикам тут не место",
            2007,
            7.726,
            122,
            vec!["триллер", "драма", "криминал"],
            25.0,
            171.627166,
        ),
        (
            "Отступники",
            2006,
            8.456,
            151,
            vec!["триллер", "драма", "криминал"],
            90.0,
            289.847354,
        ),
        (
            "Столкновение",
            2004,
            7.896,
            108,
            vec!["триллер", "драма", "криминал"],
            6.5,
            98.410061,
        ),
        (
            "Малышка на миллион",
            2004,
            8.075,
            132,
            vec!["драма", "спорт"],
            30.0,
            216.763646,
        ),
        (
            "Властелин колец: Возвращение Короля",
            2003,
            8.617,
            201,
            vec!["фэнтези", "драма", "приключения"],
            94.0,
            1119.110941,
        ),
        (
            "Чикаго",
            2002,
            7.669,
            113,
            vec!["мюзикл", "комедия", "криминал"],
            45.0,
            306.776732,
        ),
        (
            "Игры разума",
            2001,
            8.557,
            135,
            vec!["драма", "биография", "мелодрама"],
            58.0,
            313.542341,
        ),
        (
            "Гладиатор",
            2000,
            8.585,
            155,
            vec!["боевик", "драма", "приключения"],
            103.0,
            457.640427,
        ),
        (
            "Красота по-американски",
            1999,
            7.965,
            122,
            vec!["драма"],
            15.0,
            356.296601,
        ),
        (
            "Влюбленный Шекспир",
            1998,
            7.452,
            123,
            vec!["драма", "мелодрама", "комедия", "история"],
            25.0,
            289.317794,
        ),
        (
            "Титаник",
            1997,
            8.369,
            194,
            vec!["драма", "мелодрама"],
            200.0,
            2185.372302,
        ),
        (
            "Английский пациент",
            1996,
            7.849,
            155,
            vec!["драма", "мелодрама", "военный"],
            27.0,
            231.976425,
        ),
        (
            "Храброе сердце",
            1995,
            8.283,
            178,
            vec!["драма", "военный", "биография", "история"],
            72.0,
            210.409945,
        ),
        (
            "Форрест Гамп",
            1994,
            8.915,
            142,
            vec!["драма", "мелодрама"],
            55.0,
            677.386686,
        ),
        (
            "Список Шиндлера",
            1993,
            8.819,
            195,
            vec!["драма", "биография", "история"],
            22.0,
            321.265768,
        ),
        (
            "Непрощенный",
            1992,
            7.858,
            131,
            vec!["драма", "вестерн"],
            14.4,
            159.157447,
        ),
        (
            "Молчание ягнят",
            1990,
            8.335,
            114,
            vec!["триллер", "криминал", "детектив", "драма", "ужасы"],
            19.0,
            272.742922,
        ),
        (
            "Танцующий с волками",
            1990,
            8.112,
            181,
            vec!["драма", "приключения", "вестерн"],
            22.0,
            424.208848,
        ),
        (
            "Шофёр мисс Дэйзи",
            1989,
            7.645,
            99,
            vec!["драма"],
            7.5,
            145.793296,
        ),
        (
            "Человек дождя",
            1988,
            8.25,
            133,
            vec!["драма"],
            25.0,
            354.825435,
        ),
    ];

    let exchange = Exchange::new();
    let rub_to_usd_course = Dollar { amount: 1.0 }.to_rubles(&exchange).await?;
    println!("Курс доллара к рублю: 1$ = {:.2} руб.", rub_to_usd_course);

    // Задание 1.
    // Переведите бюджет фильмов "Титаник" и "Гладиатор" в рубли по текущему курсу.
    println!("Задание 1.");
    println!(
        "Бюджет фильма \"Титаник\": ${:.2} = {}₽.",
        oscar_data[20].5,
        (oscar_data[20].5 * rub_to_usd_course * 1_000_000.0).separate_with_spaces()
    );
    println!(
        "Бюджет фильма \"Гладиатор\": ${:.2} = {}₽.",
        oscar_data[17].5,
        (oscar_data[17].5 * rub_to_usd_course * 1_000_000.0).separate_with_spaces()
    );
    println!("\n");

    // Задание 2.
    //

    Ok(())
}
